import numpy as np
import matplotlib.pyplot as plt
from scipy import stats

#Задание 2
def t_ij(x, tau, mu1, mu2, sigma1, sigma2):
    """T_ij(x, theta)"""
    p_in1 = stats.norm.pdf(x, loc = mu1, scale = sigma1)
    p_in2 = stats.norm.pdf(x, loc = mu2, scale = sigma2)
    p = tau * p_in1 + (1-tau) * p_in2
    t_in1 = tau * p_in1 / p
    t_in2 = (1-tau) * p_in2 / p
    return t_in1, t_in2

def update_theta(x, tau, mu, sigma):
    """Iterate theta"""
    t_n1, t_n2 = t_ij(x, tau, mu, sigma)
    tau = np.sum(t_n1) / x.size
    mu1 = np.sum(t_n1 * x) /  np.sum(t_n1)
    mu2 = np.sum(t_n2 * x) /  np.sum(t_n2)
    sigma1 = np.sqrt(np.sum(t_n1 * (x - mu1)**2) /  np.sum(t_n1))
    sigma1 = np.sqrt(np.sum(t_n1 * (x - mu1)**2) /  np.sum(t_n1))
    return tau, mu1, sigma1, mu2, sigma2

def em_double_gauss(x, tau, mu1, sigma1, mu2, sigma2, rtol=1e-3):
    """tau, mu, sigma are initiial astimations, returns theta"""
    new = (tau, mu1, sigma1, mu2, sigma2)
    rtol = 1e-3
    while True:
        old = new
        new = update_theta(x, *old)
        if np.allclose(new, old, rtol = rtol, atol = 0):
            break
    return new
    
def main():
    x = data_generation()
    plt.hist(x, bins=100)
    tau, mu, sigma = 0.7, 0.1, 0.1
    tau, mu, sigma = em(x, tau, mu, sigma)
    print (tau, mu, sigma)
    
if __name__ == '__main__':
    main()
