import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import minimize_scalar

from collections import namedtuple

Node = namedtuple('Node', ('feature', 'value', 'impurity', 'left', 'right'))
Leaf = namedtuple('Leaf', ('value', 'x','y'))

def criteria(y):
    return np.std(y)**2

def impurity(y_left, y_right):
    size = y_left.size + y_right.size
    h = ((y_left.size * criteria(y_left) + y_right.size * criteria(y_right))/size)
    return h

def partition(x,y,feature,value):
    i_right = x[:, feature] >= value
    i_left = np.logical_not(i_right)
    return (x[i_left], y[i_left]), (x[i_right], y[i_right])

def f(value, feature, x, y):
    (_, y_left), (_, y_right) = partition(x,y,feature,value)
    return impurity(y_left, y_right)

def find_best_split(x,y):

    best_feature, best_value, best_impurity = 0, x[0,0], np.inf
    for feature in range(x.shape[1]):
        x_i_sorted = np.sort(x[:, feature])
        result = minimize_scalar(f, args=(feature, x, y), method = 'Bounded', bounds = (x_i_sorted[1], x_i_sorted[-1]))
        assert result.success
        value = result.x
        impurity = result.fun
        if impurity < best_impurity:
            best_feature, best_value, best_impurity = feature, value, impurity
    return best_feature, best_value, best_impurity

def build_tree(x,y, depth=1, max_depth=np.inf):
    if depth >= max_depth or criteria(y)<1e-6:
        return Leaf(np.mean(y), x, y)
    feature, value, impurity = find_best_split(x,y)
    (x_left, y_left), (x_right, y_right) = partition(x,y,feature, value)
    
    left = build_tree(x_left, y_left, depth+1, max_depth)
    right = build_tree(x_right, y_right, depth+1, max_depth)
    root = Node(feature, value, impurity, left, right)
    return root

def predict(tree, x):
    y = np.empty(x.shape[0])
    for i, row in enumerate(x):
        node = tree
        while isinstance(node, Node):
            if row[node.feature] >= node.value:
                node = node.right
            else:
                node= node.left
        y[i] = node.value
    return y
'''y = 2 * x[:, 0] +1'''
n = 100
x = np.random.normal(0,1, size= (n,2))
y_true = 2 * x[:, 0] +1
y = y_true + np.random.normal(0, 0.5, n) 
tree = build_tree(x,y, max_depth = 10)
plt.plot(y_true, y, 'o')
x_test = np.random.normal(0,1, size=(n,2))
y_test = 2 * x_test[:, 0] +1
y_pred = predict(tree, x_test)
plt.plot(y_test, y_pred, 'x')
print(np.std(y_test - y_pred))
plt.plot(plt.xlim(), plt.xlim(), 'k', lw = 0.5) #биссектрисса

'''y = 2 + 2 * x**2 +3*x1**2'''
plt.figure()
plt.xscale('log')
plt.yscale('log')
n = 1000
rs = np.random.RandomState(1) #генератор случайных чисел
x = rs.normal(0,1, size = (n, 2))
y_true = 2 + 2 * x[:, 0]**2 + 2 * x[:, 1]**2
y = y_true + rs.normal(0, 0.5, n) 
tree = build_tree(x,y, max_depth = 10)
plt.plot(y_true, y, 'o')
x_test = rs.normal(2,1, size=(n,2))
y_test = 2 + 2 * x_test[:, 0]**2 + 2 * x_test[:, 1]**2
y_pred = predict(tree, x_test)
plt.plot(y_test, y_pred, 'v')
print(np.std(y_test - y_pred))
plt.plot(plt.xlim(), plt.xlim(), 'k', lw = 0.5) #биссектрисса


####прямая
#n = 100
#x = np.random.normal(0,1, size= (n,2))
#y = np.asarray(x[:,0]>0, dtype=int)
#tree = build_tree(x,y)
#print(tree.left)
#print(tree.right)
#COLORS = np.array([[1.,0.,0.], [0.,0.,1.]])
#plt.scatter(*x.T, color = COLORS[y], s = 10)
#x_test = np.random.normal(0.,1., size=(n,2))
#y_pred = predict(tree, x_test).astype(np.int)
#plt.scatter(*x_test.T, color = COLORS[y_pred], marker = 'v', s=50)
#
####окружность
#
#n=100
#x = np.random.normal(0,1, size=(n,2))
#y = np.asarray(x[:,0]**2+x[:,1]**2<=1, dtype = int)
#tree = build_tree(x,y)
#print(tree.left)
#print(tree.right)
#plt.figure(figsize=(5,5))
#plt.xlim([-2,2])
#plt.ylim([-2,2])
#COLORS = np.array([[1.,0.,0.], [0.,0.,1.]])
#plt.scatter(*x.T, color = COLORS[y], s = 10)
#x_test = np.random.normal(0.,1., size=(n,2))
#y_pred = predict(tree, x_test).astype(np.int)
#plt.scatter(*x_test.T, color = COLORS[y_pred], marker = 'v', s=50)
#
###хз
#n=100
#x = np.random.normal(0,1, size=(n,2))
#y = np.asarray(x[:,0]*x[:,1]>0, dtype = int)
#tree = build_tree(x,y)
#print(tree.left)
#print(tree.right)
#plt.figure(figsize=(5,5))
#plt.xlim([-2,2])
#plt.ylim([-2,2])
#COLORS = np.array([[1.,0.,0.], [0.,0.,1.]])
#plt.scatter(*x.T, color = COLORS[y], s = 10)
#x_test = np.random.normal(0.,1., size=(n,2))
#y_pred = predict(tree, x_test).astype(np.int)
#plt.scatter(*x_test.T, color = COLORS[y_pred], marker = 'v', s=50)
###хз с шумом
#n=100000
#x = np.random.normal(0,1, size=(n,2))
#y = np.asarray(x[:,0]*x[:,1]>0, dtype = int)
#x_rand = np.random.normal(0,1,size = (n//10, 2))
#y_rand = np.random.randint(2,size = n//10)
#x = np.concatenate((x, x_rand))
#y = np.concatenate((y, y_rand))
#tree = build_tree(x,y, max_depth = 10)
#print(tree.left)
#print(tree.right)
#plt.figure(figsize=(5,5))
#plt.xlim([-2,2])
#plt.ylim([-2,2])
#plt.grid()
#COLORS = np.array([[1.,0.,0.], [0.,0.,1.]])
#plt.scatter(*x.T, color = COLORS[y], s = 10)
#x_test = np.random.normal(0.,1., size=(n,2))
#y_pred = predict(tree, x_test).astype(np.int)
#plt.figure()
#plt.scatter(*x_test.T, color = COLORS[y_pred], marker = 'v', s=50) 


