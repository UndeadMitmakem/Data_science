import matplotlib.pyplot as plt
%matplotlib inline

from cmath import *
from PIL import Image

imgx = 800
imgy = 800
image = Image.new("RGB", (imgx, imgy))

# Complex window
xa = -1.0
xb = 1.0
ya = -1.0
yb = 1.0

# root finding method
delta       = 0.000001  # convergence criteria 
iters       = 30        # number of iterations

# these are the solutions to the equation z**3-1 = 0
solutions = [cos((2*n+1)*pi/3)+1j*sin((2*n+1)*pi/3) for n in range(4)]
colors = [(1, 0, 0), (0, 1, 0), (0, 0, 1), (1, 1, 0)]

for re in range(imgx):
    for im in range(imgy):
        z = (re+1j*im)/imgx
        for i in range(iters):
            try:
                z -= (z**3-1)/(3*z**2)
            except ZeroDivisionError:
                # possibly divide by zero exception
                continue
            if(abs(z**3-1)<delta):
                break

        # color depth is a function of the number of iterations
        color_depth = int((iters-i)*255.0/iters)

        # find to which solution this guess converged to
        err = [abs(z-root) for root in solutions]
        distances = zip(err, range(len(colors)))
        
        # select the color associated with the solution
        color = [i*color_depth for i in colors[min(distances)[1]]]
        image.putpixel((re, im), tuple(color))
plt.imshow(image)
plt.title("Newton Fractal!")
